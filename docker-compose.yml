version: '3.8'

services:
    # PostgreSQL Database
    postgres:
        image: postgres:15-alpine
        container_name: trading-bot-postgres
        environment:
            POSTGRES_DB: trading_bot
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        ports:
            - '5432:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./backend/migrations:/docker-entrypoint-initdb.d
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5

    # Redis for Celery message broker
    redis:
        image: redis:7-alpine
        container_name: trading-bot-redis
        ports:
            - '6379:6379'
        volumes:
            - redis_data:/data
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5

    # FastAPI Backend
    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: trading-bot-backend
        ports:
            - '8000:8000'
        environment:
            - ENVIRONMENT=development
            - DEBUG=true
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=trading_bot
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        env_file:
            - .env
        volumes:
            - ./backend:/app
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
            interval: 30s
            timeout: 10s
            retries: 3

    # Celery Worker for Tweet Ingestion
    tweet-worker:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: trading-bot-tweet-worker
        environment:
            - ENVIRONMENT=development
            - DEBUG=true
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=trading_bot
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        env_file:
            - .env
        volumes:
            - ./backend:/app
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        command: celery -A workers.tweet_ingestion worker --loglevel=info --queues=tweets

    # Celery Worker for NLP Processing
    nlp-worker:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: trading-bot-nlp-worker
        environment:
            - ENVIRONMENT=development
            - DEBUG=true
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=trading_bot
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        env_file:
            - .env
        volumes:
            - ./backend:/app
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        command: celery -A workers.nlp_processor worker --loglevel=info --queues=nlp

    # Celery Worker for Trade Execution
    trade-worker:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: trading-bot-trade-worker
        environment:
            - ENVIRONMENT=development
            - DEBUG=true
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=trading_bot
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        env_file:
            - .env
        volumes:
            - ./backend:/app
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        command: celery -A workers.trade_executor worker --loglevel=info --queues=trades

    # Celery Beat Scheduler
    celery-beat:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: trading-bot-celery-beat
        environment:
            - ENVIRONMENT=development
            - DEBUG=true
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=trading_bot
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        env_file:
            - .env
        volumes:
            - ./backend:/app
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        command: celery -A workers.tweet_ingestion beat --loglevel=info

    # Next.js Frontend
    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        container_name: trading-bot-frontend
        ports:
            - '3000:3000'
        environment:
            - NEXT_PUBLIC_API_URL=http://localhost:8000
        volumes:
            - ./frontend:/app
            - /app/node_modules
        depends_on:
            - backend
        command: npm run dev

    # Prometheus for metrics collection
    prometheus:
        image: prom/prometheus:latest
        container_name: trading-bot-prometheus
        ports:
            - '9090:9090'
        volumes:
            - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'

    # Grafana for monitoring dashboards
    grafana:
        image: grafana/grafana:latest
        container_name: trading-bot-grafana
        ports:
            - '3001:3000'
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - grafana_data:/var/lib/grafana
            - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
            - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
    postgres_data:
    redis_data:
    prometheus_data:
    grafana_data:
